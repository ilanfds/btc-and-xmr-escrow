"""init schema

Revision ID: 856ee29b9b98
Revises: 
Create Date: 2025-08-17 22:51:13.048841

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '856ee29b9b98'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('escrows',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('asset', sa.Enum('BTC', 'XMR', name='asset'), nullable=False),
    sa.Column('price', sa.BigInteger(), nullable=False),
    sa.Column('platform_fee', sa.BigInteger(), nullable=False),
    sa.Column('fn_est', sa.BigInteger(), nullable=False),
    sa.Column('buffer', sa.BigInteger(), nullable=False),
    sa.Column('deposit_total', sa.BigInteger(), nullable=False),
    sa.Column('seller_payout_address', sa.Text(), nullable=False),
    sa.Column('buyer_payout_address', sa.Text(), nullable=True),
    sa.Column('payout_speed_profile', sa.Enum('fast', 'normal', 'slow', name='speed_profile'), nullable=True),
    sa.Column('state', sa.Enum('CREATED', 'FUNDED', 'RELEASED', 'DISPUTED', 'RESOLVED', 'CLOSED', name='escrow_state'), nullable=False),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('dispute_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('auto_release_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('buffer >= 0', name='ck_escrows_buffer_nonneg'),
    sa.CheckConstraint('deposit_total >= 0', name='ck_escrows_deposit_total_nonneg'),
    sa.CheckConstraint('deposit_total >= price + platform_fee + fn_est + buffer', name='ck_escrows_deposit_total_formula'),
    sa.CheckConstraint('fn_est >= 0', name='ck_escrows_fn_est_nonneg'),
    sa.CheckConstraint('platform_fee >= 0', name='ck_escrows_platform_fee_nonneg'),
    sa.CheckConstraint('price >= 0', name='ck_escrows_price_nonneg'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_escrows_asset_state', 'escrows', ['asset', 'state'], unique=False)
    op.create_index('ix_escrows_auto_release_at', 'escrows', ['auto_release_at'], unique=False)
    op.create_index('ix_escrows_state', 'escrows', ['state'], unique=False)
    op.create_table('idempotency_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.Text(), nullable=False),
    sa.Column('endpoint', sa.Text(), nullable=False),
    sa.Column('request_hash', sa.Text(), nullable=False),
    sa.Column('response_snapshot', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key', 'endpoint', name='uq_idempotency')
    )
    op.create_table('ledger_accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('asset', sa.Enum('BTC', 'XMR', name='asset'), nullable=False),
    sa.Column('kind', sa.Text(), nullable=False),
    sa.Column('ref_id', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('asset', 'kind', 'ref_id', name='uq_ledger_accounts')
    )
    op.create_table('webhook_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.Text(), nullable=False),
    sa.Column('kind', sa.Text(), nullable=False),
    sa.Column('idempotency_key', sa.Text(), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('processed', sa.Boolean(), nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('idempotency_key', 'kind', name='uq_webhook')
    )
    op.create_table('deposits',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('escrow_id', sa.Integer(), nullable=False),
    sa.Column('asset', sa.Enum('BTC', 'XMR', name='asset'), nullable=False),
    sa.Column('txid', sa.Text(), nullable=False),
    sa.Column('vout', sa.Integer(), nullable=True),
    sa.Column('destination', sa.Text(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('confirmations_current', sa.Integer(), nullable=False),
    sa.Column('confirmed_height', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', name='deposit_status'), nullable=False),
    sa.Column('first_seen_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('amount >= 0', name='ck_deposits_amount_nonneg'),
    sa.CheckConstraint('confirmations_current >= 0', name='ck_deposits_confs_nonneg'),
    sa.ForeignKeyConstraint(['escrow_id'], ['escrows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('txid', 'vout', name='uq_deposits_txid_vout')
    )
    op.create_index('ix_deposits_destination', 'deposits', ['destination'], unique=False)
    op.create_index('ix_deposits_escrow_id', 'deposits', ['escrow_id'], unique=False)
    op.create_index('ix_deposits_status', 'deposits', ['status'], unique=False)
    op.create_table('disputes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('escrow_id', sa.Integer(), nullable=False),
    sa.Column('opened_by', sa.Enum('SELLER', 'BUYER', 'PLATFORM', name='opened_by'), nullable=False),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('evidence_url', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('OPEN', 'CLOSED', name='dispute_status'), nullable=False),
    sa.Column('to_seller', sa.Integer(), nullable=True),
    sa.Column('to_buyer', sa.Integer(), nullable=True),
    sa.Column('resolved_by', sa.String(), nullable=True),
    sa.Column('opened_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('price_at_open', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('(to_buyer IS NULL) OR (to_buyer >= 0)', name='ck_disputes_to_buyer_nonneg'),
    sa.CheckConstraint('(to_seller IS NULL) OR (to_seller >= 0)', name='ck_disputes_to_seller_nonneg'),
    sa.CheckConstraint('price_at_open >= 0', name='ck_disputes_price_at_open_nonneg'),
    sa.ForeignKeyConstraint(['escrow_id'], ['escrows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('uq_one_open_dispute_per_escrow', 'disputes', ['escrow_id'], unique=True, postgresql_where=sa.text("status = 'OPEN'"))
    op.create_table('escrow_destinations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('escrow_id', sa.Integer(), nullable=False),
    sa.Column('asset', sa.Enum('BTC', 'XMR', name='asset'), nullable=False),
    sa.Column('destination', sa.Text(), nullable=False),
    sa.Column('meta', sa.JSON(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['escrow_id'], ['escrows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('destination', name='uq_escrow_destinations_destination')
    )
    op.create_index('ix_escrow_destinations_destination', 'escrow_destinations', ['destination'], unique=False)
    op.create_index('uq_escrow_destination_active', 'escrow_destinations', ['escrow_id'], unique=True, postgresql_where=sa.text('active IS TRUE'))
    op.create_table('ledger_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('journal_id', sa.String(length=36), nullable=False),
    sa.Column('asset', sa.Enum('BTC', 'XMR', name='asset'), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('memo', sa.Text(), nullable=True),
    sa.Column('ref_type', sa.Text(), nullable=False),
    sa.Column('ref_id', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('amount <> 0', name='ck_ledger_entries_amount_nonzero'),
    sa.ForeignKeyConstraint(['account_id'], ['ledger_accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_ledger_entries_account_id', 'ledger_entries', ['account_id'], unique=False)
    op.create_index('ix_ledger_entries_asset', 'ledger_entries', ['asset'], unique=False)
    op.create_index('ix_ledger_entries_journal_id', 'ledger_entries', ['journal_id'], unique=False)
    op.create_table('payouts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('escrow_id', sa.Integer(), nullable=False),
    sa.Column('asset', sa.Enum('BTC', 'XMR', name='asset'), nullable=False),
    sa.Column('kind', sa.Enum('NORMAL', 'DISPUTE', name='payout_kind'), nullable=False),
    sa.Column('txid', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('BROADCAST', 'CONFIRMED', 'FAILED', name='payout_status'), nullable=False),
    sa.Column('feerate_profile', sa.Enum('fast', 'normal', 'slow', name='feerate_profile'), nullable=True),
    sa.Column('vbytes_est', sa.Integer(), nullable=True),
    sa.Column('fn_est_at_send', sa.Integer(), nullable=True),
    sa.Column('fn_real', sa.Integer(), nullable=True),
    sa.Column('broadcast_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('confirmed_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('(fn_est_at_send IS NULL) OR (fn_est_at_send >= 0)', name='ck_payouts_fn_est_nonneg'),
    sa.CheckConstraint('(fn_real IS NULL) OR (fn_real >= 0)', name='ck_payouts_fn_real_nonneg'),
    sa.CheckConstraint('(vbytes_est IS NULL) OR (vbytes_est >= 0)', name='ck_payouts_vbytes_nonneg'),
    sa.ForeignKeyConstraint(['escrow_id'], ['escrows.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('txid', name='uq_payouts_txid')
    )
    op.create_index('ix_payouts_escrow_id', 'payouts', ['escrow_id'], unique=False)
    op.create_index('ix_payouts_status', 'payouts', ['status'], unique=False)
    op.create_index('ix_payouts_txid', 'payouts', ['txid'], unique=False)
    op.create_index('uq_one_broadcast_payout_per_escrow', 'payouts', ['escrow_id'], unique=True, postgresql_where=sa.text("status = 'BROADCAST'"))
    op.create_table('payout_outputs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('payout_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.Enum('SELLER', 'BUYER', 'PLATFORM', name='role'), nullable=False),
    sa.Column('address', sa.Text(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('amount >= 0', name='ck_payout_outputs_amount_nonneg'),
    sa.ForeignKeyConstraint(['payout_id'], ['payouts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('payout_outputs')
    op.drop_index('uq_one_broadcast_payout_per_escrow', table_name='payouts', postgresql_where=sa.text("status = 'BROADCAST'"))
    op.drop_index('ix_payouts_txid', table_name='payouts')
    op.drop_index('ix_payouts_status', table_name='payouts')
    op.drop_index('ix_payouts_escrow_id', table_name='payouts')
    op.drop_table('payouts')
    op.drop_index('ix_ledger_entries_journal_id', table_name='ledger_entries')
    op.drop_index('ix_ledger_entries_asset', table_name='ledger_entries')
    op.drop_index('ix_ledger_entries_account_id', table_name='ledger_entries')
    op.drop_table('ledger_entries')
    op.drop_index('uq_escrow_destination_active', table_name='escrow_destinations', postgresql_where=sa.text('active IS TRUE'))
    op.drop_index('ix_escrow_destinations_destination', table_name='escrow_destinations')
    op.drop_table('escrow_destinations')
    op.drop_index('uq_one_open_dispute_per_escrow', table_name='disputes', postgresql_where=sa.text("status = 'OPEN'"))
    op.drop_table('disputes')
    op.drop_index('ix_deposits_status', table_name='deposits')
    op.drop_index('ix_deposits_escrow_id', table_name='deposits')
    op.drop_index('ix_deposits_destination', table_name='deposits')
    op.drop_table('deposits')
    op.drop_table('webhook_events')
    op.drop_table('ledger_accounts')
    op.drop_table('idempotency_keys')
    op.drop_index('ix_escrows_state', table_name='escrows')
    op.drop_index('ix_escrows_auto_release_at', table_name='escrows')
    op.drop_index('ix_escrows_asset_state', table_name='escrows')
    op.drop_table('escrows')
    # ### end Alembic commands ###
